package org.embulk.input.athena;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Properties;

import com.google.common.base.Optional;

import org.embulk.config.Config;
import org.embulk.config.ConfigDefault;
import org.embulk.config.ConfigDiff;
import org.embulk.config.ConfigSource;
import org.embulk.config.Task;
import org.embulk.config.TaskReport;
import org.embulk.config.TaskSource;
import org.embulk.input.jdbc.AbstractJdbcInputPlugin;
import org.embulk.input.jdbc.JdbcInputConnection;
import org.embulk.spi.Exec;
import org.embulk.spi.InputPlugin;
import org.embulk.spi.PageOutput;
import org.embulk.spi.Schema;
import org.embulk.spi.SchemaConfig;

public class AthenaInputPlugin
        extends AbstractJdbcInputPlugin
{
    public interface AthenaPluginTask
            extends AbstractJdbcInputPlugin.PluginTask
    {
        @Config("driver_path")
        @ConfigDefault("null")
        public Optional<String> getDriverPath();

        // athena_url (required string)
        @Config("athena_url")
        public String getAthenaUrl();

        // s3_staging_dir (required string)
        @Config("s3_staging_dir")
        public String getS3StagingDir();

        // access_key (required string)
        @Config("access_key")
        public String getAccessKey();        

        // secret_key (required string)
        @Config("secret_key")
        public String getSecretKey();

        // configuration option 2 (optional string, null is not allowed)
        // @Config("option2")
        // @ConfigDefault("\"myvalue\"")
        // public String getOption2();

        // configuration option 3 (optional string, null is allowed)
        // @Config("option3")
        // @ConfigDefault("null")
        // public Optional<String> getOption3();

        // if you get schema from config
        // @Config("columns")
        // public SchemaConfig getColumns();
    }

    @Override
    protected Class<? extends PluginTask> getTaskClass() {
        return AthenaPluginTask.class;
    }

    @Override
    protected AthenaInputConnection newConnection(PluginTask pluginTask) throws SQLException {
        AthenaPluginTask task = (AthenaPluginTask) pluginTask;
        loadDriver("com.amazonaws.athena.jdbc.AthenaDriver", task.getDriverPath());
        //Class.forName("com.amazonaws.athena.jdbc.AthenaDriver");
        Properties properties = new Properties();
        properties.put("s3_staging_dir", task.getS3StagingDir());
        properties.put("user", task.getAccessKey());
        properties.put("password", task.getSecretKey());
        properties.putAll(task.getOptions());

        Connection connection = DriverManager.getConnection(task.getAthenaUrl(), properties);
        try {
            AthenaInputConnection c = new AthenaInputConnection(connection);
            connection = null;
            return c;
        } finally {
            if (connection != null) {
                connection.close();
            }
        }
    }

/*
    @Override
    public ConfigDiff transaction(ConfigSource config,
            InputPlugin.Control control)
    {
        PluginTask task = config.loadConfig(PluginTask.class);

        // Schema schema = task.getColumns().toSchema();
        Schema schema = Schema.builder().build();
        int taskCount = 1;  // number of run() method calls

        return resume(task.dump(), schema, taskCount, control);
    }

    @Override
    public ConfigDiff resume(TaskSource taskSource,
            Schema schema, int taskCount,
            InputPlugin.Control control)
    {
        control.run(taskSource, schema, taskCount);
        return Exec.newConfigDiff();
    }

    @Override
    public void cleanup(TaskSource taskSource,
            Schema schema, int taskCount,
            List<TaskReport> successTaskReports)
    {
    }

    @Override
    public TaskReport run(TaskSource taskSource,
            Schema schema, int taskIndex,
            PageOutput output)
    {
        PluginTask task = taskSource.loadTask(PluginTask.class);
        
        // Write your code here :)

        Connection connection = null;
        Statement statement = null;
        try {
            connection = getAthenaConnection(task);
            statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from default.sample");

            while(resultSet.next()){
                String statusCode = resultSet.getString("created_at");
                System.out.println("st code" + statusCode);
            }
            resultSet.close();
            connection.close();
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            try {
                if (statement != null)
                    statement.close();
            } catch (Exception ex) {
   
            }
            try {
                if (connection != null)
                    connection.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        return Exec.newTaskReport();
    }

    @Override
    public ConfigDiff guess(ConfigSource config)
    {
        return Exec.newConfigDiff();
    }
*/
/*
    protected Connection getAthenaConnection(PluginTask task) throws ClassNotFoundException, SQLException{
        Class.forName("com.amazonaws.athena.jdbc.AthenaDriver");
        Properties properties = new Properties();
        properties.put("s3_staging_dir", task.getS3StagingDir());
        properties.put("user", task.getAccessKey());
        properties.put("password", task.getSecretKey());
        if (task.getLogPath() != null){
            properties.put("log_path", task.getLogPath());
        }
        if (task.getLogLevel() != null){
            properties.put("log_level", task.getLogLevel());
        }

        return DriverManager.getConnection(task.getAthenaUrl(), properties);
    }
    */
}
